{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tasim\\\\CS-Projects\\\\words-game\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n//import { getWords } from \"./dataModules\";\nimport { useEffect, useState, useRef } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport ProgressBar from \"./components/progressBar\";\nimport Form from \"./components/form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  var _words$count;\n\n  const [words, setWords] = useState(\"\");\n  const [count, setCount] = useState(0);\n  const [value, setValue] = useState(null);\n  const [correctAnswers, setCorrectAnswers] = useState([]);\n  const [answersScore, setAnswersScore] = useState(null);\n  const checkedRef = useRef([]);\n  let navigate = useNavigate();\n  useEffect(() => {\n    function getWords() {\n      const request = axios.get(\"http://localhost:3001/data\");\n      return request.then(response => {\n        //   console.log(\"this is response from module 1\",response.data)\n        return setWords(response.data);\n      });\n    } //  console.log(words);\n\n\n    getWords();\n  }, []); //this take the value of the choosen option and store it \n\n  const handleCheck = e => {\n    setValue(e.target.value);\n  }; //submit answer\n\n\n  const submitWord = e => {\n    e.preventDefault(); //when the user answers the poll the score will increse by 10 or by 0 and get stored \n\n    if (value === words[count].pos) {\n      setCorrectAnswers([...correctAnswers, true]);\n      setAnswersScore(answersScore + 10);\n    } else {\n      setCorrectAnswers([...correctAnswers, false]);\n    } //map through the checkBox inputs stored in checkedRef to reset thier values after submiting the answer\n\n\n    checkedRef.current.map(element => element.checked = false); //reset value for new question\n\n    setValue(null); // counting till ten questions have been recieved \n\n    if (count < 9) {\n      setCount(count + 1);\n    } else {\n      navigate(`/result/${answersScore}`);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title\",\n          children: \"Choose the right answer that describe this word\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"main-word\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: (_words$count = words[count]) === null || _words$count === void 0 ? void 0 : _words$count.word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          checkedRef: checkedRef,\n          handleCheck: handleCheck,\n          submitWord: submitWord\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n      correctAnswers: correctAnswers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"Fw+BdZTFV6GCeBd3bBKC5xPSl5A=\", false, function () {\n  return [useNavigate];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","useRef","axios","useNavigate","ProgressBar","Form","App","words","setWords","count","setCount","value","setValue","correctAnswers","setCorrectAnswers","answersScore","setAnswersScore","checkedRef","navigate","getWords","request","get","then","response","data","handleCheck","e","target","submitWord","preventDefault","pos","current","map","element","checked","word"],"sources":["C:/Users/Tasim/CS-Projects/words-game/client/src/App.js"],"sourcesContent":["//import { getWords } from \"./dataModules\";\nimport { useEffect, useState, useRef } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport ProgressBar from \"./components/progressBar\";\nimport Form from \"./components/form\";\n\nfunction App() {\n  const [words, setWords] = useState(\"\");\n  const [count, setCount] = useState(0);\n  const [value, setValue] = useState(null);\n  const [correctAnswers, setCorrectAnswers] = useState([]);\n  const [answersScore, setAnswersScore] = useState(null);\n  const checkedRef = useRef([]);\n\n  let navigate = useNavigate();\n\n  useEffect(() => {\n    function getWords() {\n      const request = axios.get(\"http://localhost:3001/data\");\n\n      return request.then((response) => {\n        //   console.log(\"this is response from module 1\",response.data)\n\n        return setWords(response.data);\n      });\n    }\n    //  console.log(words);\n    getWords();\n  }, []);\n\n//this take the value of the choosen option and store it \n  const handleCheck = (e) => {\n    setValue(e.target.value);\n  };\n\n  //submit answer\n  const submitWord = (e) => {\n    e.preventDefault();\n\n    //when the user answers the poll the score will increse by 10 or by 0 and get stored \n    if (value === words[count].pos) {\n      setCorrectAnswers([...correctAnswers, true]);\n      setAnswersScore(answersScore + 10);\n    } else {\n      setCorrectAnswers([...correctAnswers, false]);\n    }\n    //map through the checkBox inputs stored in checkedRef to reset thier values after submiting the answer\n    checkedRef.current.map((element) => (element.checked = false));\n\n    //reset value for new question\n    setValue(null);\n    // counting till ten questions have been recieved \n    if (count < 9) {\n      setCount(count + 1);\n    } else {\n      navigate(`/result/${answersScore}`);\n\n    \n    }\n\n  };\n\n\n  return (\n    <>\n      <div className=\"main-container\">\n        <section>\n          <h1 className=\"title\">\n            Choose the right answer that describe this word\n          </h1>\n          <div className=\"main-word\">\n            <h2>{words[count]?.word}</h2>\n          </div>\n        </section>\n        <section>\n          <Form checkedRef={checkedRef} handleCheck={handleCheck} submitWord={submitWord} />\n        </section>\n      </div>\n       <ProgressBar correctAnswers={correctAnswers} />\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}